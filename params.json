{"name":"architecture.gem","tagline":"architecture.gem is a filesystem library for easy scaffold generator creation","body":"  - [![Quality](http://img.shields.io/codeclimate/github/krainboltgreene/architecture.gem.svg?style=flat-square)](https://codeclimate.com/github/krainboltgreene/architecture.gem)\r\n  - [![Coverage](http://img.shields.io/codeclimate/coverage/github/krainboltgreene/architecture.gem.svg?style=flat-square)](https://codeclimate.com/github/krainboltgreene/architecture.gem)\r\n  - [![Build](http://img.shields.io/travis-ci/krainboltgreene/architecture.gem.svg?style=flat-square)](https://travis-ci.org/krainboltgreene/architecture.gem)\r\n  - [![Dependencies](http://img.shields.io/gemnasium/krainboltgreene/architecture.gem.svg?style=flat-square)](https://gemnasium.com/krainboltgreene/architecture.gem)\r\n  - [![Downloads](http://img.shields.io/gem/dtv/architecture.svg?style=flat-square)](https://rubygems.org/gems/architecture)\r\n  - [![Tags](http://img.shields.io/github/tag/krainboltgreene/architecture.gem.svg?style=flat-square)](http://github.com/krainboltgreene/architecture.gem/tags)\r\n  - [![Releases](http://img.shields.io/github/release/krainboltgreene/architecture.gem.svg?style=flat-square)](http://github.com/krainboltgreene/architecture.gem/releases)\r\n  - [![Issues](http://img.shields.io/github/issues/krainboltgreene/architecture.gem.svg?style=flat-square)](http://github.com/krainboltgreene/architecture.gem/issues)\r\n  - [![License](http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](http://opensource.org/licenses/MIT)\r\n  - [![Version](http://img.shields.io/gem/v/architecture.svg?style=flat-square)](https://rubygems.org/gems/architecture)\r\n\r\n\r\nArchitecture is a library that makes scaffolding and file manipulation easy. It gives you a programatic interface and DSL for creating, copying, moving, \"rendering\", & deleting files and directories.\r\n\r\nArchitecture's main goal is to become the library of choice for gems like rake and thor.\r\n\r\n\r\nUsing\r\n=====\r\n\r\nUsing the DSL you can:\r\n\r\n``` ruby\r\nrequire \"architecture/dsl\"\r\n\r\narchitecture source: \"old\", destination: \"new\"  do |arc|\r\n  # Filesystem transactions here, see below\r\nend\r\n```\r\n\r\n**Copy Operation**\r\n\r\n``` ruby\r\n# Copy a file OR directory:\r\narc.copy file: \"README.md\"\r\narc.copy directory: \"docs\"\r\n\r\n# Copy over a file OR directory with a new name:\r\narc.copy file: \"LICENSE\", as: \"COPYRIGHT\"\r\narc.copy directory: \"test\", as: \"spec\"\r\n\r\n# Copy over a file with context:\r\narc.copy file: \"app.rb\", context: { module: \"Foobar\" }\r\n\r\n#> old/applicaiton.rb\r\n# module {{module}}\r\n#\r\n# end\r\n#\r\n#> new/application.rb\r\n# module Foobar\r\n#\r\n# end\r\n```\r\n\r\n\r\n**Create Operation**\r\n\r\n``` ruby\r\n# Create a file OR directory in the destination:\r\narc.create file: \"app.rb\"\r\narc.create directory: \"lib\"\r\n\r\n# Create a file with content in the destination:\r\narc.create file: \"app.rb\", content: \"Some thing.\"\r\n\r\n# Create a file with some embedded context in the destination:\r\narc.create file: \"app.rb\", content: \"Some {{foo}}.\", context: { foo: \"thing.\" }\r\n\r\n# Create a directory in the destination and work within it:\r\narc.create directory: \"lib\" do |arc|\r\n  arc.create file: \"project.rb\"\r\nend\r\n\r\n# Create a file OR directory in a specific location:\r\narc.create file: \"dev.txt\", location: \"/var/logs\"\r\narc.create directory: \"output/\", location: arc.join(arc.source, \"tmp\")\r\n```\r\n\r\n\r\n**Delete Operation**\r\n\r\n``` ruby\r\n# Delete a file or directory in the destination:\r\narc.delete file: \"app.rb\"\r\narc.delete directory: \"app\"\r\n\r\n# Delete a file OR directory in a specific directory:\r\narc.delete file: \"dev.txt\", location: \"/var/logs\"\r\narc.delete directory: \"output/\", location: arc.join(arc.source, \"tmp\")\r\n```\r\n\r\n\r\n**Move Operation**\r\n\r\n``` ruby\r\n# Move a file or directory:\r\narc.move file: \"app.rb\", as: \"app.rb\"\r\narc.move directory: \"app.rb\", as: \"app.rb\"\r\n```\r\n\r\n\r\n**Overwrite Operation**\r\n\r\n``` ruby\r\n# Write over a file:\r\narc.overwrite file: \"app.rb\", content: \"\\n\"\r\n\r\n# Overwrite content in a file in a specific directory:\r\narc.overwrite file: \"dev.txt\", content: \"\\n\", location: \"/var/logs\"\r\narc.overwrite file: \"dev.txt\", content: \"\\n\", location: arc.join(arc.source, \"logs\")\r\n```\r\n\r\n\r\n**Append Operation**\r\n\r\n``` ruby\r\narc.append file: \"app.rb\", content: \"end\"\r\n\r\n# Append content in a file in a specific directory:\r\narc.append file: \"dev.txt\", content: \"+\", location: \"/var/logs\"\r\narc.append file: \"dev.txt\", content: \"+\", location: arc.join(arc.source, \"logs\")\r\n```\r\n\r\n\r\n**Prepend Operation**\r\n\r\n``` ruby\r\narc.prepend file: \"app.rb\", content: \"class Foobaz\"\r\n\r\n# Prepend content in a file in a specific directory:\r\narc.prepend file: \"dev.txt\", content: \"-\", location: \"/var/logs\"\r\narc.prepend file: \"dev.txt\", content: \"-\", location: arc.join(arc.source, \"logs\")\r\n```\r\n\r\n\r\n**Replace Operation**\r\n\r\n``` ruby\r\narc.replace file: \"app.rb\", search: /Foobaz/, content: \"Foobar\"\r\n\r\n# Replace content in a file in a specific directory:\r\narc.replace file: \"dev.txt\", search: /a/, content: \"b\", location: \"/var/logs\"\r\narc.replace file: \"dev.txt\", search: /a/, content: \"b\", location: arc.join(arc.source, \"logs\")\r\n```\r\n\r\n\r\n**Within Scope**\r\n\r\n``` ruby\r\narc.within \"folder\" do |arc|\r\n  arc.create name: \"version.rb\", content: \"VERSION = 1.0.0\"\r\nend\r\n\r\narc.within source: \"/var\", destination: \"/tmp\" do |arc|\r\n  arc.create name: \"version.rb\", content: \"VERSION = 1.0.0\"\r\nend\r\n```\r\n\r\n\r\nInstalling\r\n==========\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem \"architecture\", \"6.0.0\"\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself with:\r\n\r\n    $ gem install architecture\r\n\r\n\r\nContributing\r\n============\r\n\r\n  1. Fork it\r\n  2. Create your feature branch (`git checkout -b my-new-feature`)\r\n  3. Commit your changes (`git commit -am 'Add some feature'`)\r\n  4. Push to the branch (`git push origin my-new-feature`)\r\n  5. Create new Pull Request\r\n\r\n\r\nChangelog\r\n=========\r\n\r\n  - 6.0.0:\r\n    * Added logging for the DSL layer\r\n    * Extracted Entity from Transactions\r\n    * Added 'within' capability to create/copy/move\r\n    * Added a location option for targeted transactions, so things don't need to be scoped\r\n  - 5.2.1: Fixed a bug with `within` DSL.\r\n  - 5.2.0:\r\n    * Finally got around to writing tests for `Entity`\r\n    * Fixed a bug where it was reading from an old ivar\r\n    * Allowed an engine to be used on an Entity, internally at least\r\n  - 5.1.2: Fixing an issue where path was not set in a Entity.\r\n  - 5.1.1:\r\n    * The `create` dsl method now defaults to as, then file/directory.\r\n    * `move` no longer path scopes the `as:` value.\r\n  - 5.1.0:\r\n    * Making the `copy` & `move` dsl methods use the same file/directory syntax\r\n    * Updating the readme documentation to match the new scoping rules\r\n    * Fixing a problem with within not using the right argument name\r\n  - 5.0.0: Making the private methods public, a fix for when we went to scoped.\r\n  - 4.0.0: Making each block have a scope object.\r\n  - 3.0.0: Removing the `architecture` method from `Object`\r\n  - 2.0.1: Added mustache as a runtime, instead of development dependency\r\n  - 2.0.0: Cleaned up a lot of the DSL api to make it easier to understand.\r\n  - 1.1.0: Adding the Create functionality (woops)\r\n  - 1.0.0: Initial release\r\n\r\n\r\nConduct\r\n=======\r\n\r\nAs contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.\r\n\r\nWe are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, or religion.\r\n\r\nExamples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.\r\n\r\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. Project maintainers who do not follow the Code of Conduct may be removed from the project team.\r\n\r\nThis code of conduct applies both within project spaces and in public spaces when an individual is representing the project or its community.\r\n\r\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers.\r\n\r\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.1.0, available at [http://contributor-covenant.org/version/1/1/0/](http://contributor-covenant.org/version/1/1/0/)\r\n\r\n\r\nLicense\r\n=======\r\n\r\nCopyright (c) 2015 Kurtis Rainbolt-Greene\r\n\r\nMIT License\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-18715035-1","note":"Don't delete this file! It's used internally to help with page regeneration."}